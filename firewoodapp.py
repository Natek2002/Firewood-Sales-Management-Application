# Form implementation generated from reading ui file 'firewoodapp.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import mysql.connector
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox

firewood_data = {}  # Dictionary to store firewood types and their prices

class FirewoodApp(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.connect_to_db()
        self.load_firewood_data()  # Load data from firewood_prices.txt
        self.tabWidget.setCurrentIndex(0)  # Start with the Dashboard Tab
        self.tabWidget.currentChanged.connect(self.on_tab_change)  # Tab change event

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1109, 907)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 0, 1091, 861))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.btnPurchase = QtWidgets.QPushButton("Purchase", self.tab)
        self.btnPurchase.setGeometry(20, 30, 113, 32)
        self.btnPurchase.clicked.connect(self.show_purchase)
        self.btnSearch = QtWidgets.QPushButton("Search", self.tab)
        self.btnSearch.setGeometry(20, 80, 113, 32)
        self.btnSearch.clicked.connect(self.show_search)
        self.btnDisplay = QtWidgets.QPushButton("Display", self.tab)
        self.btnDisplay.setGeometry(20, 130, 113, 32)
        self.btnDisplay.clicked.connect(self.goto_display_tab)
        self.btnExit = QtWidgets.QPushButton("Exit", self.tab)
        self.btnExit.setGeometry(20, 180, 113, 32)
        self.btnExit.clicked.connect(self.close)      
        self.tabWidget.addTab(self.tab, "Dashboard")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.lblTransactionId = QtWidgets.QLabel("Transaction ID", self.tab_2)
        self.lblTransactionId.setGeometry(10, 30, 120, 16)
        self.txtTransactionID = QtWidgets.QLineEdit(self.tab_2)
        self.txtTransactionID.setGeometry(150, 30, 113, 21)
        self.lblCustomerName = QtWidgets.QLabel("Customer Name", self.tab_2)
        self.lblCustomerName.setGeometry(10, 60, 120, 16)
        self.txtCustomerName = QtWidgets.QLineEdit(self.tab_2)
        self.txtCustomerName.setGeometry(150, 60, 113, 21)
        self.lblFireWoodType = QtWidgets.QLabel("Firewood Type", self.tab_2)
        self.lblFireWoodType.setGeometry(10, 100, 120, 16)
        self.cmbWoodType = QtWidgets.QComboBox(self.tab_2)
        self.cmbWoodType.setGeometry(150, 100, 111, 26)
        self.lblQuantity = QtWidgets.QLabel("Quantity", self.tab_2)
        self.lblQuantity.setGeometry(10, 140, 120, 16)
        self.txtQuantity = QtWidgets.QLineEdit(self.tab_2)
        self.txtQuantity.setGeometry(150, 140, 113, 21)
        self.txtTotalDisplay = QtWidgets.QLineEdit(self.tab_2)
        self.txtTotalDisplay.setGeometry(150, 180, 113, 21)
        self.txtTotalDisplay.setReadOnly(True)
        self.btnDisplayTotal = QtWidgets.QPushButton("Display Total", self.tab_2)
        self.btnDisplayTotal.setGeometry(10, 180, 120, 32)
        self.btnDisplayTotal.clicked.connect(self.calculate_total)
        self.btnPurchase_2 = QtWidgets.QPushButton("Purchase", self.tab_2)
        self.btnPurchase_2.setGeometry(90, 230, 113, 32)
        self.btnPurchase_2.clicked.connect(self.complete_purchase)
        self.tabWidget.addTab(self.tab_2, "Purchase")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.lblSearchWoodType = QtWidgets.QLabel("Firewood Type", self.tab_3)
        self.lblSearchWoodType.setGeometry(10, 40, 120, 16)
        self.cmbSearchWoodType = QtWidgets.QComboBox(self.tab_3)
        self.cmbSearchWoodType.setGeometry(87, 40, 111, 26)
        self.btnAveragePrice = QtWidgets.QPushButton("Calculate Average Price", self.tab_3)
        self.btnAveragePrice.setGeometry(10, 80, 180, 32)
        self.btnAveragePrice.clicked.connect(self.calculate_average)
        self.txtAveragePrice = QtWidgets.QLineEdit(self.tab_3)
        self.txtAveragePrice.setGeometry(43, 120, 113, 21)
        self.txtAveragePrice.setReadOnly(True)
        self.btnDisplaySearchData = QtWidgets.QPushButton("Display Data", self.tab_3)
        self.btnDisplaySearchData.setGeometry(10, 160, 180, 32)
        self.btnDisplaySearchData.clicked.connect(self.display_data)
        self.tblSearchResults = QtWidgets.QTableWidget(self.tab_3)
        self.tblSearchResults.setGeometry(280, 30, 791, 251)
        self.tblSearchResults.setColumnCount(5)
        self.tblSearchResults.setHorizontalHeaderLabels(["ID", "Name", "Type", "Qty", "Total"])

        
        # Adding the search tab to the tab widget.
        self.tabWidget.addTab(self.tab_3, "Search")

        # Set up for the display tab with a table to display transactions.
        self.tab_4 = QtWidgets.QWidget()
        self.tblDisplayTransactions = QtWidgets.QTableWidget(self.tab_4)
        self.tblDisplayTransactions.setGeometry(QtCore.QRect(10, 10, 1071, 391))
        self.tblDisplayTransactions.setColumnCount(5)
        self.tblDisplayTransactions.setHorizontalHeaderLabels(["ID", "Name", "Type", "Qty", "Total"])
        self.tabWidget.addTab(self.tab_4, "Display")

        # Set up for the main windows central widget.
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle("Firewood Sales")

        # Connection to the MySQL database
    def connect_to_db(self):
        try:
            # Establishing a connection to the MySQL database.
            self.db = mysql.connector.connect(
                host="localhost", user="root", password="Asmeret1978$@", database="finalprojectdb"
            )
            self.cursor = self.db.cursor()
        except mysql.connector.Error as e:
            # Show an error message if connection fails.
            QMessageBox.critical(self, "Database Error", f"Connection failed: {e}")

            # To load firewood data from a text file into dropdown menu.
    def load_firewood_data(self):
        try:
            with open("firewood_prices.txt", "r") as file:
                for line in file:
                    wood_type, price = line.strip().split(',')
                    firewood_data[wood_type] = float(price)
            # Add firewoodtypes to combo boxes for user selection.
            self.cmbWoodType.addItems(firewood_data.keys())
            self.cmbSearchWoodType.addItems(firewood_data.keys())
        except FileNotFoundError:
            QMessageBox.warning(self, "Error", "firewood_prices.txt not found")


            # To calculate the total cost of firewood purchase.
    def calculate_total(self):
        try:
            # Get's the quantity and price, and calculate the total cost including tax.
            quantity = int(self.txtQuantity.text())
            price = firewood_data[self.cmbWoodType.currentText()]
            total = quantity * price * 1.08
            self.txtTotalDisplay.setText(f"{total:.2f}")
        except ValueError:
            # Show warning if input is invalid.
            QMessageBox.warning(self, "Input Error", "Invalid input for quantity")

            # Method to complete a purchase transaction.
    def complete_purchase(self):
            # collect all input values.
        transaction_id = self.txtTransactionID.text()
        customer_name = self.txtCustomerName.text()
        wood_type = self.cmbWoodType.currentText()
        quantity = self.txtQuantity.text()
        total = self.txtTotalDisplay.text()
        
        if not all([transaction_id, customer_name, wood_type, quantity, total]):
            QMessageBox.warning(self, "Input Error", "Please fill in all fields")
            return
        
        try:
            # Insert the transaction into the database.
            self.cursor.execute(
                "INSERT INTO firewood_sales (transactionid, customername, type, quantity, total) "
                "VALUES (%s, %s, %s, %s, %s)",
                (transaction_id, customer_name, wood_type, int(quantity), float(total))
            )
            self.db.commit() # Commit the transaction.
            QMessageBox.information(self, "Success", "Transaction successfully added!")
            self.show_display()
        except mysql.connector.Error as e:
            QMessageBox.critical(self, "Database Error", f"Error: {e}")
        except ValueError:
            QMessageBox.warning(self, "Input Error", "Ensure all fields contain valid data")

            # Calculate the average price for a specefic firewood type.
    def calculate_average(self):
        wood_type = self.cmbSearchWoodType.currentText()
        try:
            # Execute query to calculate average total price.
            self.cursor.execute("SELECT AVG(total) FROM firewood_sales WHERE type = %s", (wood_type,))
            result = self.cursor.fetchone()[0]
            avg_price = result if result else 0
            self.txtAveragePrice.setText(f"{avg_price:.2f}")
        except mysql.connector.Error as e:
            QMessageBox.critical(self, "Database Error", f"Error: {e}")

            # Display's search results for a specific firewood type.
    def display_data(self):
        wood_type = self.cmbSearchWoodType.currentText()
        try:
            self.cursor.execute("SELECT * FROM firewood_sales WHERE type = %s", (wood_type,))
            rows = self.cursor.fetchall()
            self.tblSearchResults.setRowCount(0) # Clears the search results table.
            for row in rows:
                row_position = self.tblSearchResults.rowCount()
                self.tblSearchResults.insertRow(row_position)
                for col, data in enumerate(row):
                    self.tblSearchResults.setItem(row_position, col, QtWidgets.QTableWidgetItem(str(data)))
        except mysql.connector.Error as e:
            QMessageBox.critical(self, "Database Error", f"Error: {e}")


            # Populates the display table with all transaction.
    def show_display(self):
        try:
            self.cursor.execute("SELECT * FROM firewood_sales") # Gets all the records.
            rows = self.cursor.fetchall()
            self.tblDisplayTransactions.setRowCount(0) # Clears table before updating.
            for row in rows:
                row_position = self.tblDisplayTransactions.rowCount()
                self.tblDisplayTransactions.insertRow(row_position)
                for col, data in enumerate(row):
                    self.tblDisplayTransactions.setItem(row_position, col, QtWidgets.QTableWidgetItem(str(data)))
        except mysql.connector.Error as e:
            QMessageBox.critical(self, "Database Error", f"Error: {e}")



    def goto_display_tab(self):
        self.tabWidget.setCurrentIndex(3)  # Switch to the Display tab
        self.show_display()                # Populate the Display tab


        # Switch to the purchase tab.
    def show_purchase(self):
        self.tabWidget.setCurrentIndex(1)

        # Switch to the search tab.
    def show_search(self):
        self.tabWidget.setCurrentIndex(2)

        # event handler to refresh display tab content when the tab changes.
    def on_tab_change(self, index):
        if index == 3:  # Display tab 
            self.show_display()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = FirewoodApp()
    window.show()
    sys.exit(app.exec())
